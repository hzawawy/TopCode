package srm516;

import java.util.HashSet;
import java.util.Iterator;

public class NetworkXOneTimePad {

	public int crack(String[] plaintexts, String[] ciphertexts){
		HashSet<String> keys = new HashSet<String>();
		HashSet<String> possibleKeys = new HashSet<String>();
		HashSet<String> originals = new HashSet<String>();		
		for (int i=0; i<plaintexts.length; i++){
			originals.add(plaintexts[i]);
			for (int k=0; k<ciphertexts.length; k++){
				StringBuilder key = new StringBuilder();
				for (int j=0; j<plaintexts[i].length(); j++){
					if (ciphertexts[k].charAt(j)=='0')
						key.append(plaintexts[i].charAt(j));
					else { 
						if (plaintexts[i].charAt(j)=='0')
							key.append('1');
						else
							key.append('0');
					}
				}
				possibleKeys.add(key.toString());
				keys.add(key.toString());
			}
		}
		
		Iterator<String> iter = possibleKeys.iterator();
		while (iter.hasNext()){
			String key = iter.next();
			StringBuilder possibleOrig = new StringBuilder();
			for (int i=0; i<ciphertexts.length; i++){
				for (int k =0; k<ciphertexts[i].length(); k++)
					if (ciphertexts[i].charAt(k)=='0')
						possibleOrig.append(key.charAt(k));
					else {
						if (key.charAt(k)=='0')
							possibleOrig.append('1');
						else
							possibleOrig.append('0');
					}
				if (!originals.contains(possibleOrig.toString()))
					keys.remove(key);
				possibleOrig = new StringBuilder();
			}
		}
		
		return keys.size();
	}
	
	public static void main(String[] args) {
		NetworkXOneTimePad network = new NetworkXOneTimePad();
		String[] plaintexts = 
//			{"000", "111", "010", "101", "110", "001"};
			{"11000111111100110111001000001101100011100100", "01000001011101011100110010000010001000001010", "11000001011111001010011001011101110000001100", "01001001111110000110011101101100111111111101", "10110111111110100000011010111100001110001001", "01011101011011001010011111000000011011110010", "01101100110000011110100110011100101100001111", "00011111011000100010001001100101110100000001", "11011001111101011101101110101011100110100110", "10100010010110000100010100001001000010110110", "01011100000110101110001011011011001100110011", "01001001110110101111111111110110001100011001", "00010001100011000101010001010110010110000110", "00011100000101101011111010000001010111011101", "10101111010000001001011010000001111000111110", "11011100000100011111011010100111110011010111", "11011100010111100100110010111110000110001111", "00001100100101100101101100000011000011000000", "10001011101001111110010100011001010100000011", "10110110100111101011100010000001000110100110", "10010111001101100110010000011001101011110010", "10011001101011010001101100010010011011000011", "10110111110100101010010100101110001000111011", "01001111000101000101011111101101010111100111", "00111100100101011101111100100001101111110001", "00110111101011100011111001101010011010100011", "11100110101010100000100110001111000000111000", "01100011110111110011011011100011001101000101", "11000001100100110011100010101001010001010010", "11100010110111000011100010111001111010000011", "00000111101011010000000011010011111010100100", "10111110001011110011100100101100110101100101", "00111000101100010011111011110001101100110111", "00001111110011000011001111010010001111011011", "01011010011000111001010000100011111101010110", "00100000100010100110111000010000000010001110", "01111110111101111101000010011011011100011111", "10111001000010110100001110010111111001010110", "10101001111011000101010110111111110010110100", "11000110101001110100101111011010001010001111", "00011010100111100010100010011110000100011000", "10100110110110111110001010100111101100100000", "11001110110010000000010101001011111000011111", "01110011011100001011011110010000111011011111", "11010000110111001101010101100000011010111111", "10110000010010111011011011000111000001000001", "00100100000001001100001111011010100101001000", "10110010111010111011011111111101010100110100"};
		String[] ciphertexts = 
//			{"011", "100"};
	{"01101010111110000110111000010010000000101100", "10001101010101100100000000110111100100000110", "11011101101011111101100011100011111010001010", "01000111100001000110100110101100111000001111", "11110100100100101011001001000100000000111011", "10000101110110111110101111011001010011110001", "11000011111011111011111101100111100011010111", "10010110010000000001100010010110010001011010", "10110010110101000101110000101110110000010011", "00010000001100100111101000010010011111011011", "01011011000101011110100010101100000111111110", "11101100101010011110001010100101101110000010", "01110010000011001011010110011001011001101001", "11010110101111011010010000101011101000010100", "00000010111010111000100111111110010100010011", "01111110110010000011101101001000111000111000", "01111011110110011000101000001001100010000101", "10010001010011110010101101110101110111111110", "10000101111110010111001101000011100000010101", "01111010101111010011010000110100101010101010", "00001101010111110010101011101000011100000000", "01100101110011111101100100001010011110111000", "01101110011110111100100110111100101110111010", "10010000001110010110111001101110100000111111", "00010000011111011100000000001011101010000011", "11111011100011011011001011011111110110101111", "11000000101101011101011110110110101111001100", "01111100011010000011101001110010101101001101"};
		System.out.println(network.crack(plaintexts, ciphertexts));
	}

}
